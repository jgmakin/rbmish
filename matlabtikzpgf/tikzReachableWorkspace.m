function outtxt = tikzReachableWorkspace(roboparams)
% tikzReachableWorkspace  Tikz string for drawing reachable workspace
%
% USAGE:
%{   
    outtxt = ['\begin{tikzpicture}','[x=0.1cm,y=0.1cm]',sprintf('\n')];
    outtxt = [outtxt,tikzReachableWorkspace(roboparams)];
    outtxt = [outtxt,'\end{tikzpicture}'];
%}
% Given the joint limits (shoulder, elbow), link lengths, and maximal x, y
% positions of a 2-rotational-link (planar) kinematic arm, returns a string
% of tikz code to draw the reachable workspace.  Some elements have been
% hard-coded, but not much.

%-------------------------------------------------------------------------%
% Created: 02/27/16
%   -JGM 
%-------------------------------------------------------------------------%

% unload
armlengths  = roboparams.armlengths;
thmin       = roboparams.thmin;
thmax       = roboparams.thmax;
posmin      = roboparams.posmin;
posmax      = roboparams.posmax;

% compute the page limits based on reachable limits
pagemin = posmin - 0.1*(posmax - posmin);
pagemax = posmax + 0.1*(posmax - posmin);
L1 = armlengths(1);
L2 = armlengths(2);


% compute centers and radii of  all four circles
xBig = [L1,0] + L2*[cos(thmin(2)),sin(thmin(2))];
xSml = [L1,0] + L2*[cos(thmax(2)),sin(thmax(2))];
Cntrs = [L1*[cos(thmax(1)+pi/2),sin(thmax(1)+pi/2)]; 0 0; L1 0; 0 0];
radii = [L2; sqrt(sum(xBig.^2)); L2; sqrt(sum(xSml.^2))];
intersections  = [1:size(Cntrs,1),1]; 
%%% NB: the last intersection is again the first


% write the circles into TikZ-style circle-creating strings
for iCirc = 1:size(Cntrs,1)
    circStrCell{iCirc} =...
        ['(',num2str(Cntrs(iCirc,1)),',',num2str(Cntrs(iCirc,2)),')',...
        ' circle ','(',num2str(radii(iCirc)),');'];
end

% set bounding box
outtxt = ['\path[use as bounding box] (',...
    num2str(pagemin(1)),',',num2str(pagemin(2)), ') rectangle (',...
    num2str(pagemax(1)),',',num2str(pagemax(2)), ');', sprintf('\n')];

% set up "reverse clip"
outtxt = [outtxt,'\tikzstyle{reverseclip}=[insert path={%',sprintf('\n')...
    sprintf('\t'),'(current page.north east) --',sprintf('\n')...
    sprintf('\t'),'(current page.south east) --',sprintf('\n')...
    sprintf('\t'),'(current page.south west) --',sprintf('\n')...
    sprintf('\t'),'(current page.north west) --',sprintf('\n')...
    sprintf('\t'),'(current page.north east)}',sprintf('\n'),...
    ']',sprintf('\n'),'%',sprintf('\n')];

% write strings for creating the circle *paths*
for iCirc = 1:size(Cntrs,1)
    outtxt = [outtxt,'\path[name path=path',num2str(iCirc),']',...
        circStrCell{iCirc},sprintf('\n')];
end
outtxt = [outtxt,'%',sprintf('\n')];

% find the circle intersections with pgf/tikz
outtxt = [outtxt,...
    '\path[name intersections={of=path4 and path1,',...
    'by={Z,inter',num2str(intersections(1)),'}}];',sprintf('\n'),...
    '\path[name intersections={of=path1 and path2,',...
    'by={Z, inter', num2str(intersections(2)),'}}];',sprintf('\n'),...
    '\path[name intersections={of=path3 and path2,',...
    'by={inter',num2str(intersections(3)),', Z}}];',sprintf('\n'),...
    '\path[name intersections={of=path3 and path4,',...
    'by={inter',num2str(intersections(4)),', Z}}];',sprintf('\n')];
outtxt = [outtxt,'%',sprintf('\n')];

% write out circles with reverse clipping masks
for iCirc = 1:size(Cntrs,1)
    
    % hard-coded
    if iCirc < 3, signStr = '-'; else signStr = '+'; end
    
    outtxt = [outtxt, '\begin{scope}', sprintf('\n'),...
        sprintf('\t'), '\path let \p1 = ($(inter', num2str(intersections(iCirc)),...
        ') - (inter',num2str(intersections(iCirc+1)),...
        ')$), \p2 = ($(inter', num2str(intersections(iCirc+1)),')',...
        signStr,'(-\y1,\x1)$)', sprintf('\n'),...
        sprintf('\t\t'), 'in node (crnrA) at (\p2) {};', sprintf('\n')];
    outtxt = [outtxt,...
        sprintf('\t'),'\path let \p1 = ($(inter',num2str(intersections(iCirc)),...
        ') - (inter',num2str(intersections(iCirc+1)),...
        ')$), \p2 = ($(inter', num2str(intersections(iCirc)),')',...
        signStr,'(-\y1,\x1)$)',sprintf('\n'),...
        sprintf('\t\t'),'in node (crnrB) at (\p2) {};',sprintf('\n')];
    outtxt = [outtxt,...
        sprintf('\t'),'\clip (inter',num2str(intersections(iCirc+1)),...
        ') -- (crnrA.center) -- (crnrB.center) -- (inter',...
        num2str(intersections(iCirc)),') -- cycle;',sprintf('\n'),...
        sprintf('\t'),'\draw[name path=path',num2str(iCirc),']',...
        circStrCell{iCirc},sprintf('\n'),...
        '\end{scope}',sprintf('\n')];
end


end